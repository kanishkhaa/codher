import React, { useState, useEffect, useContext } from 'react';
import { Bell, Calendar, Clock, Check, Plus, Trash2, Filter, ChevronDown, Pill, Repeat, AlertCircle, X, TrendingUp } from 'lucide-react';
import Sidebar from '../../components/sidebar';
import { AppContext } from "../context/AppContext";

const Reminders = () => {
  const { prescriptionHistory, medicationData, reminders, setReminders } = useContext(AppContext);
  const [isSidebarOpen, setSidebarOpen] = useState(true);
  const [showAddReminder, setShowAddReminder] = useState(false);
  const [filterStatus, setFilterStatus] = useState('all');
  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);
  const [newReminder, setNewReminder] = useState({
    id: '',
    title: '',
    medication: '',
    description: '',
    time: '',
    date: new Date().toISOString().split('T')[0],
    priority: 'medium',
    completed: false,
    recurring: 'daily',
    takenHistory: [],
  });
  const [showReport, setShowReport] = useState(false);
  const [reportType, setReportType] = useState('weekly');

  useEffect(() => {
    localStorage.setItem('reminders', JSON.stringify(reminders));
  }, [reminders]);

  const handleAddReminder = () => {
    if (newReminder.title && newReminder.time) {
      const updatedReminder = {
        ...newReminder,
        id: `manual-${Date.now()}`,
        isAutoGenerated: false,
        takenHistory: [],
      };
      setReminders(prev => [...prev, updatedReminder]);
      setNewReminder({
        id: '',
        title: '',
        medication: '',
        description: '',
        time: '',
        date: new Date().toISOString().split('T')[0],
        priority: 'medium',
        completed: false,
        recurring: 'daily',
        takenHistory: [],
      });
      setShowAddReminder(false);
    }
  };

  const handleToggleComplete = (id) => {
    setReminders(prev => 
      prev.map(reminder => 
        reminder.id === id ? { ...reminder, completed: !reminder.completed } : reminder
      )
    );
  };

  const handleMarkTaken = (id) => {
    setReminders(prev => 
      prev.map(reminder => {
        if (reminder.id === id && !reminder.completed) {
          const now = new Date();
          return {
            ...reminder,
            completed: true,
            takenHistory: [...reminder.takenHistory, now.toISOString()],
          };
        }
        return reminder;
      })
    );
  };

  const handleDeleteReminder = (id) => {
    setReminders(prev => prev.filter(reminder => reminder.id !== id));
  };
  const handleCancelAdd = () => {
    setShowAddReminder(false);
    setNewReminder({
      id: '',
      title: '',
      medication: '',
      description: '',
      time: '',
      date: new Date().toISOString().split('T')[0],
      priority: 'medium',
      completed: false,
      recurring: 'daily',
      takenHistory: [],
    });
  };

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'high': return 'text-red-400 bg-red-500/20';
      case 'medium': return 'text-yellow-400 bg-yellow-500/20';
      case 'low': return 'text-green-400 bg-green-500/20';
      default: return 'text-blue-400 bg-blue-500/20';
    }
  };

  const isToday = (dateString) => {
    const today = new Date().toISOString().split('T')[0];
    return dateString === today;
  };

  const isOverdue = (dateString, timeString) => {
    const today = new Date().toISOString().split('T')[0];
    if (dateString < today) return true;
    if (dateString === today) {
      const now = new Date();
      const reminderTime = new Date(`${dateString}T${timeString}`);
      return now > reminderTime;
    }
    return false;
  };

  const filteredReminders = reminders.filter(reminder => {
    if (filterStatus === 'completed') return reminder.completed;
    if (filterStatus === 'active') return !reminder.completed;
    if (filterStatus === 'today') return isToday(reminder.date) && !reminder.completed;
    if (filterStatus === 'overdue') return isOverdue(reminder.date, reminder.time) && !reminder.completed;
    return true;
  });

  const sortedReminders = [...filteredReminders].sort((a, b) => {
    if (a.date !== b.date) return new Date(a.date) - new Date(b.date);
    if (a.completed !== b.completed) return a.completed ? 1 : -1;
    const priorityOrder = { high: 0, medium: 1, low: 2 };
    if (a.priority !== b.priority) return priorityOrder[a.priority] - priorityOrder[b.priority];
    return a.time.localeCompare(b.time);
  });

  const groupedReminders = sortedReminders.reduce((groups, reminder) => {
    const date = reminder.date;
    if (!groups[date]) groups[date] = [];
    groups[date].push(reminder);
    return groups;
  }, {});

  const formatDate = (dateString) => {
    const options = { weekday: 'long', month: 'long', day: 'numeric' };
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', options);
  };

  const calculateComplianceReport = () => {
    const now = new Date();
    const startDate = new Date();
    if (reportType === 'weekly') {
      startDate.setDate(now.getDate() - 7);
    } else {
      startDate.setMonth(now.getMonth() - 1);
    }
    const periodStart = startDate.toISOString().split('T')[0];

    const relevantReminders = reminders.filter(r => r.date >= periodStart);
    const totalReminders = relevantReminders.length;
    const takenReminders = relevantReminders.filter(r => r.completed).length;
    const complianceRate = totalReminders > 0 ? (takenReminders / totalReminders * 100).toFixed(1) : 0;

    const medicationStats = {};
    relevantReminders.forEach(r => {
      if (r.medication) {
        if (!medicationStats[r.medication]) {
          medicationStats[r.medication] = { total: 0, taken: 0 };
        }
        medicationStats[r.medication].total += 1;
        if (r.completed) medicationStats[r.medication].taken += 1;
      }
    });

    return { complianceRate, medicationStats, periodStart, totalReminders, takenReminders };
  };

  const { complianceRate, medicationStats, periodStart, totalReminders, takenReminders } = calculateComplianceReport();

  return (
    <div className="bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white min-h-screen flex">
      <div className={`fixed inset-y-0 left-0 z-10 transition-transform duration-300 transform ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}`}>
        <Sidebar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />
      </div>

      <div className={`flex-1 transition-all duration-300 ${isSidebarOpen ? 'ml-64' : 'ml-0'} overflow-hidden`}>
        <div className="min-h-screen flex flex-col">
          <div className="p-8">
            <div className="flex justify-between items-center mb-8">
              <div>
                <h1 className="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-500 mb-2">Medication Reminders</h1>
                <p className="text-gray-400 text-sm tracking-wide">Manage your medication schedule and stay on track</p>
              </div>
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <button
                    className="flex items-center bg-gray-800/60 backdrop-blur-lg text-white px-4 py-2 rounded-full border border-gray-700/30 hover:bg-gray-700/60 transition-colors"
                    onClick={() => setIsFilterDropdownOpen(!isFilterDropdownOpen)} // Toggle dropdown visibility
                  >
                    <Filter className="w-4 h-4 mr-2" />
                    {filterStatus.charAt(0).toUpperCase() + filterStatus.slice(1)}
                    <ChevronDown className="w-4 h-4 ml-2" />
                  </button>
                  {isFilterDropdownOpen && ( // Conditionally render dropdown
                    <div className="absolute right-0 mt-2 w-48 bg-gray-800 rounded-xl shadow-lg z-10 overflow-hidden border border-gray-700/50">
                      <div 
                        className="py-2 px-4 hover:bg-gray-700 cursor-pointer" 
                        onClick={() => { setFilterStatus('all'); setIsFilterDropdownOpen(false); }}
                      >
                        All
                      </div>
                      <div 
                        className="py-2 px-4 hover:bg-gray-700 cursor-pointer" 
                        onClick={() => { setFilterStatus('today'); setIsFilterDropdownOpen(false); }}
                      >
                        Today
                      </div>
                      <div 
                        className="py-2 px-4 hover:bg-gray-700 cursor-pointer" 
                        onClick={() => { setFilterStatus('active'); setIsFilterDropdownOpen(false); }}
                      >
                        Active
                      </div>
                      <div 
                        className="py-2 px-4 hover:bg-gray-700 cursor-pointer" 
                        onClick={() => { setFilterStatus('completed'); setIsFilterDropdownOpen(false); }}
                      >
                        Completed
                      </div>
                      <div 
                        className="py-2 px-4 hover:bg-gray-700 cursor-pointer" 
                        onClick={() => { setFilterStatus('overdue'); setIsFilterDropdownOpen(false); }}
                      >
                        Overdue
                      </div>
                    </div>
                  )}
                </div>
                <button 
                  onClick={() => setShowReport(true)}
                  className="bg-gray-800/60 text-white px-4 py-2 rounded-full hover:bg-gray-700/60 transition-colors flex items-center"
                >
                  <TrendingUp className="w-5 h-5 mr-2" />
                  View Report
                </button>
                <button 
                  onClick={() => setShowAddReminder(true)}
                  className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-5 py-2 rounded-full hover:scale-105 transition-transform shadow-lg flex items-center"
                >
                  <Plus className="w-5 h-5 mr-2" />
                  Add Reminder
                </button>
              </div>
            </div>
          </div>

          <div className="flex flex-1 px-8 pb-8 overflow-hidden">
            <div className="flex-1 overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center">
                  <Bell className="w-6 h-6 text-purple-400 mr-2" />
                  <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-500">
                    Your Reminders
                  </h2>
                </div>
                <div className="bg-gray-800/60 backdrop-blur-xl px-4 py-2 rounded-full border border-gray-700/30">
                  <span className="text-gray-400 mr-2">Today:</span>
                  <span className="text-white font-bold">{reminders.filter(r => isToday(r.date) && !r.completed).length}</span>
                  <span className="text-gray-400 mx-2">|</span>
                  <span className="text-gray-400 mr-2">Total:</span>
                  <span className="text-white font-bold">{reminders.filter(r => !r.completed).length}</span>
                </div>
              </div>

              {Object.keys(groupedReminders).length > 0 ? (
                Object.entries(groupedReminders).map(([date, dateReminders]) => (
                  <div key={date} className="mb-8">
                    <div className="flex items-center mb-4">
                      <Calendar className="w-5 h-5 text-gray-400 mr-2" />
                      <h3 className={`text-xl font-semibold ${isToday(date) ? 'text-purple-400' : 'text-gray-300'}`}>
                        {isToday(date) ? 'Today' : formatDate(date)}
                      </h3>
                    </div>
                    <div className="space-y-4">
                      {dateReminders.map((reminder) => (
                        <div 
                          key={reminder.id} 
                          className={`bg-gray-800/60 backdrop-blur-xl rounded-2xl p-4 border border-gray-700/30 shadow-xl transition-all ${
                            reminder.completed ? 'opacity-60' : 'hover:shadow-purple-900/10'
                          }`}
                        >
                          <div className="flex items-start">
                            <button
                              onClick={() => handleToggleComplete(reminder.id)}
                              className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center mr-4 mt-1 transition-colors ${
                                reminder.completed 
                                  ? 'bg-purple-500 border-purple-600' 
                                  : `border-${getPriorityColor(reminder.priority).split(' ')[0]}`
                              }`}
                            >
                              {reminder.completed && <Check className="w-4 h-4 text-white" />}
                            </button>
                            <div className="flex-1">
                              <div className="flex items-center justify-between mb-1">
                                <h4 className={`font-semibold text-lg ${reminder.completed ? 'line-through text-gray-500' : 'text-white'}`}>
                                  {reminder.title}
                                </h4>
                                <div className="flex items-center space-x-2">
                                  {isOverdue(reminder.date, reminder.time) && !reminder.completed && (
                                    <span className="px-2 py-1 bg-red-500/20 text-red-400 rounded-full text-xs font-medium">
                                      Overdue
                                    </span>
                                  )}
                                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(reminder.priority)}`}>
                                  {reminder.priority?.charAt(0).toUpperCase() + reminder.priority?.slice(1) || "No Priority"}

                                  </span>
                                  {reminder.recurring !== 'none' && (
                                    <span className="px-2 py-1 bg-blue-500/20 text-blue-400 rounded-full text-xs font-medium flex items-center">
                                      <Repeat className="w-3 h-3 mr-1" />
                                      {reminder.recurring?.charAt(0).toUpperCase() + reminder.recurring?.slice(1) || "Not Recurring"}

                                    </span>
                                  )}
                                </div>
                              </div>
                              {reminder.medication && (
                                <div className="flex items-center text-sm text-gray-400 mb-2">
                                  <Pill className="w-4 h-4 mr-1 text-purple-400" />
                                  {reminder.medication}
                                </div>
                              )}
                              {reminder.description && (
                                <p className="text-gray-400 text-sm mb-3">{reminder.description}</p>
                              )}
                              <div className="flex items-center justify-between">
                                <div className="flex items-center text-sm">
                                  <Clock className="w-4 h-4 mr-1 text-gray-500" />
                                  <span className={`${reminder.completed ? 'text-gray-500' : 'text-gray-300'}`}>
                                    {reminder.time}
                                  </span>
                                </div>
                                <div className="flex space-x-2">
                                  {!reminder.completed && (
                                    <button 
                                      onClick={() => handleMarkTaken(reminder.id)}
                                      className="bg-green-500/20 text-green-400 px-3 py-1 rounded-full text-sm hover:bg-green-500/30 transition-colors"
                                    >
                                      Mark Taken
                                    </button>
                                  )}
                                  <button 
                                    onClick={() => handleDeleteReminder(reminder.id)}
                                    className="text-gray-500 hover:text-red-400 transition-colors p-1"
                                  >
                                    <Trash2 className="w-4 h-4" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))
              ) : (
                <div className="flex flex-col items-center justify-center h-64 bg-gray-800/40 backdrop-blur-xl rounded-2xl p-8 border border-gray-700/30">
                  <Bell className="w-16 h-16 text-gray-600 mb-4" />
                  <h3 className="text-xl font-semibold text-gray-400 mb-2">No reminders found</h3>
                  <button 
                    onClick={() => setShowAddReminder(true)}
                    className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-5 py-2 rounded-full hover:scale-105 transition-transform shadow-lg flex items-center"
                  >
                    <Plus className="w-5 h-5 mr-2" />
                    Add Reminder
                  </button>
                </div>
              )}
            </div>

            <div className="w-80 flex-shrink-0 pl-6">
              <div className="sticky top-0 pt-8">
                {/* ... (Existing Upcoming Reminders and Compliance Stats sections remain unchanged) */}
              </div>
            </div>
          </div>
        </div>

        {showAddReminder && (
          <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className="bg-gray-800 rounded-2xl p-8 max-w-md w-full border border-gray-700/50 shadow-2xl">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-500">
                  Add New Reminder
                </h3>
                <button 
                  onClick={handleCancelAdd}
                  className="p-2 hover:bg-gray-700/50 rounded-full"
                >
                  <X className="w-5 h-5 text-gray-400" />
                </button>
              </div>
              <div className="space-y-4">
                <div>
                  <label className="block text-gray-400 text-sm mb-1">Title</label>
                  <input 
                    type="text"
                    value={newReminder.title}
                    onChange={(e) => setNewReminder({...newReminder, title: e.target.value})}
                    className="w-full bg-gray-700/60 border border-gray-600/50 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                    placeholder="Take medication"
                  />
                </div>
                <div>
                  <label className="block text-gray-400 text-sm mb-1">Medication (Optional)</label>
                  <select
                    value={newReminder.medication}
                    onChange={(e) => setNewReminder({...newReminder, medication: e.target.value})}
                    className="w-full bg-gray-700/60 border border-gray-600/50 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                  >
                    <option value="">Select medication (optional)</option>
                    {medicationData.map(med => (
                      <option key={med.id} value={med.name}>{med.name}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-gray-400 text-sm mb-1">Description (Optional)</label>
                  <textarea 
                    value={newReminder.description}
                    onChange={(e) => setNewReminder({...newReminder, description: e.target.value})}
                    className="w-full bg-gray-700/60 border border-gray-600/50 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 resize-none"
                    placeholder="Additional details"
                    rows={2}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-gray-400 text-sm mb-1">Date</label>
                    <input 
                      type="date"
                      value={newReminder.date}
                      onChange={(e) => setNewReminder({...newReminder, date: e.target.value})}
                      className="w-full bg-gray-700/60 border border-gray-600/50 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                    />
                  </div>
                  <div>
                    <label className="block text-gray-400 text-sm mb-1">Time</label>
                    <input 
                      type="time"
                      value={newReminder.time}
                      onChange={(e) => setNewReminder({...newReminder, time: e.target.value})}
                      className="w-full bg-gray-700/60 border border-gray-600/50 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-gray-400 text-sm mb-1">Priority</label>
                    <select
                      value={newReminder.priority}
                      onChange={(e) => setNewReminder({...newReminder, priority: e.target.value})}
                      className="w-full bg-gray-700/60 border border-gray-600/50 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                    >
                      <option value="low">Low</option>
                      <option value="medium">Medium</option>
                      <option value="high">High</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-gray-400 text-sm mb-1">Recurring</label>
                    <select
                      value={newReminder.recurring}
                      onChange={(e) => setNewReminder({...newReminder, recurring: e.target.value})}
                      className="w-full bg-gray-700/60 border border-gray-600/50 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                    >
                      <option value="none">None</option>
                      <option value="daily">Daily</option>
                      <option value="weekly">Weekly</option>
                      <option value="monthly">Monthly</option>
                    </select>
                  </div>
                </div>
              </div>
              <div className="flex space-x-4 mt-8">
                <button
                  onClick={handleCancelAdd}
                  className="flex-1 px-4 py-2 bg-gray-700 text-gray-300 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleAddReminder}
                  className="flex-1 px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:opacity-90 transition-opacity flex items-center justify-center"
                  disabled={!newReminder.title || !newReminder.time}
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Add Reminder
                </button>
              </div>
            </div>
          </div>
        )}

        {showReport && (
          <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className="bg-gray-800 rounded-2xl p-8 max-w-lg w-full border border-gray-700/50 shadow-2xl">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-500">
                  {reportType.charAt(0).toUpperCase() + reportType.slice(1)} Compliance Report
                </h3>
                <button 
                  onClick={() => setShowReport(false)}
                  className="p-2 hover:bg-gray-700/50 rounded-full"
                >
                  <X className="w-5 h-5 text-gray-400" />
                </button>
              </div>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <button
                    onClick={() => setReportType('weekly')}
                    className={`px-4 py-2 rounded-full ${reportType === 'weekly' ? 'bg-purple-600 text-white' : 'bg-gray-700 text-gray-300'} hover:bg-purple-500 transition-colors`}
                  >
                    Weekly
                  </button>
                  <button
                    onClick={() => setReportType('monthly')}
                    className={`px-4 py-2 rounded-full ${reportType === 'monthly' ? 'bg-purple-600 text-white' : 'bg-gray-700 text-gray-300'} hover:bg-purple-500 transition-colors`}
                  >
                    Monthly
                  </button>
                </div>
                <div>
                  <p className="text-gray-400">Period: Since {formatDate(periodStart)}</p>
                  <p className="text-gray-400">Total Reminders: {totalReminders}</p>
                  <p className="text-gray-400">Taken: {takenReminders}</p>
                  <p className="text-xl font-bold text-purple-400 mt-2">Compliance Rate: {complianceRate}%</p>
                  <div className="w-full bg-gray-700 rounded-full h-2 mt-2">
                    <div 
                      className="h-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-400"
                      style={{ width: `${complianceRate}%` }}
                    ></div>
                  </div>
                </div>
                <div>
                  <h4 className="text-lg font-semibold text-gray-300 mb-2">Medication Breakdown</h4>
                  {Object.entries(medicationStats).map(([med, stats]) => (
                    <div key={med} className="mb-3">
                      <div className="flex justify-between text-gray-400 text-sm">
                        <span>{med}</span>
                        <span>{stats.taken}/{stats.total} ({((stats.taken / stats.total) * 100).toFixed(1)}%)</span>
                      </div>
                      <div className="w-full bg-gray-700 rounded-full h-1.5 mt-1">
                        <div 
                          className="h-1.5 rounded-full bg-purple-500"
                          style={{ width: `${(stats.taken / stats.total) * 100}%` }}
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Reminders;